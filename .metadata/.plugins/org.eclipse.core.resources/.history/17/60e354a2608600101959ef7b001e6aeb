package com.example.demo.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

	@Bean
	public AuthenticationManager authenticationManager(UserDetailsService userDetailsService,
			PasswordEncoder passwordEncoder) {
		DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
		authenticationProvider.setUserDetailsService(userDetailsService);
		authenticationProvider.setPasswordEncoder(passwordEncoder);
		return new ProviderManager(authenticationProvider);

	}

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
	    http
	        .authorizeHttpRequests(auth -> auth
	        	.requestMatchers("/", "/index.html").permitAll()
	            // dozvoljeno svima
	            .requestMatchers("/Dogadjaji/registracijaController/**", "/Dogadjaji/loginController/**").permitAll()
	            // samo admin
	            .requestMatchers("/Dogadjaji/administratorController/**").hasRole("ADMIN")
	            // samo korisnik
	            .requestMatchers("/Dogadjaji/dogadjajController/**", "/Dogadjaji/porukaController/**").hasRole("KORISNIK")
	            // sve ostalo traÅ¾i autentifikaciju
	            .anyRequest().authenticated()
	        )
	        .csrf(csrf -> csrf.disable());

	    return http.build();
	}


//	@Bean
//	public UserDetailsService userDetailsService() {
//		// TODO: implement
//		return null;
//	}

}
