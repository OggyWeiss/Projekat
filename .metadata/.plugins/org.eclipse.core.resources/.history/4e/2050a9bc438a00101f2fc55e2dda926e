package com.example.demo.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.example.demo.repository.KorisnikRepository;

@Configuration
@EnableWebSecurity
public class SecurityConfig {


	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		System.out.println("Usao u metod filterChain");
		
		http.authorizeHttpRequests(auth -> auth.requestMatchers("/", "/index.html").permitAll()
				.requestMatchers("/Dogadjaji/registracijaController/**", "/Dogadjaji/loginController/**").permitAll()
				.requestMatchers("/login").permitAll()
				.requestMatchers("/Dogadjaji/administratorController/**").hasRole("ADMIN")
				.requestMatchers("/Dogadjaji/dogadjajController/**", "/Dogadjaji/porukaController/**")
				.hasRole("KORISNIK").anyRequest().authenticated())

				.formLogin(form -> form.loginPage("/Dogadjaji/loginController/loginStranica")
						.loginProcessingUrl("/login")
						.successHandler((request, response, authentication) -> {
							boolean isAdmin = authentication.getAuthorities().stream()
									.anyMatch(a -> a.getAuthority().equals("ROLE_ADMIN"));
							if (isAdmin) {
								response.sendRedirect("/Dogadjaji/administrator/administratorHome");
							} else {
								response.sendRedirect("/Dogadjaji/korisnik/korisnikHome");
							}
						}).failureUrl("/Dogadjaji/loginController/loginStranica?error=true").permitAll())
				.csrf(csrf -> csrf.disable());
		System.out.println("Zavrsio blok koda u filterChain");
		return http.build();
	}

	@Bean
	public UserDetailsService userDetailsService(KorisnikRepository korisnikRepository) {
		return new CustomUserDetailsService(korisnikRepository);
	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	public AuthenticationManager authenticationManager(UserDetailsService userDetailsService,
			PasswordEncoder passwordEncoder) {
		DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
		authenticationProvider.setUserDetailsService(userDetailsService);
		authenticationProvider.setPasswordEncoder(passwordEncoder);
		return new ProviderManager(authenticationProvider);
		
	}
}
